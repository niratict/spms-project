const updateTestFile = async (req, res) => {
  try {
    const { status, filename, json_content } = req.body;
    const fileId = req.params.id;
    let newFile = req.file;

    console.log("Updating file:", fileId);

    const [currentFile] = await db.query(
      'SELECT * FROM test_files WHERE file_id = ? AND status != "Deleted"',
      [fileId]
    );

    if (!currentFile.length) {
      return res.status(404).json({ message: "Test file not found" });
    }

    if (newFile) {
      // Delete old file if exists
      try {
        await fs.unlink(
          path.join("uploads/test-files", currentFile[0].original_filename)
        );
      } catch (err) {
        console.error("Error deleting old file:", err);
      }
    }

    const updateData = {
      status: status || currentFile[0].status,
      filename: filename || currentFile[0].filename,
      last_modified_date: new Date(),
      last_modified_by: req.user.name,
    };

    if (newFile) {
      updateData.original_filename = newFile.originalname;
      updateData.file_size = newFile.size;
      updateData.filename = filename || newFile.filename;

      const fileContent = await fs.readFile(newFile.path, "utf8");
      updateData.json_content = fileContent;
    } else if (json_content) {
      updateData.json_content = JSON.stringify(json_content);
    }

    const updateQuery = `
      UPDATE test_files 
      SET ${Object.keys(updateData)
        .map((key) => `${key} = ?`)
        .join(", ")}
      WHERE file_id = ?
    `;

    await db.query(updateQuery, [...Object.values(updateData), fileId]);

    await db.query(
      `INSERT INTO test_file_history 
       (file_id, action_type, action_by, details) 
       VALUES (?, 'modify', ?, ?)`,
      [
        fileId,
        req.user.name,
        JSON.stringify({
          modified_date: new Date(),
          changes: updateData,
        }),
      ]
    );

    await db.query(
      `INSERT INTO action_logs 
       (user_id, action_type, target_table, target_id, details) 
       VALUES (?, ?, ?, ?, ?)`,
      [
        req.user.user_id,
        "update",
        "test_files",
        fileId,
        JSON.stringify(updateData),
      ]
    );

    res.json({
      message: "Test file updated successfully",
      filename: updateData.filename,
    });
  } catch (error) {
    console.error("Error in updateTestFile:", error);
    res.status(500).json({ error: error.message });
  }
};